name: Build and Deploy to Develop Build Branch

on:
  push:
    branches: ["develop"] # Gatilho na branch develop
  workflow_dispatch:

# Permissões necessárias: 'contents: write' para permitir que a action faça push para a branch develop-builds
permissions:
  contents: write

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Source Code (develop branch)
        uses: actions/checkout@v4
        # O token padrão é usado aqui para checkout

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18" # Sua versão do Node.js
          cache: "npm"

      - name: Install Dependencies
        run: npm ci

      - name: Build React App
        run: npm run build # Executa 'vite build' e cria a pasta ./dist
        env:
          # Garanta que o Secret tem a URL da API de DEV correta
          VITE_API_URL: ${{ secrets.REACT_APP_API_URL_DEV }} # Ou o nome correto do seu Secret

      - name: Deploy build artifacts to develop-builds branch
        uses: peaceiris/actions-gh-pages@v4 # Action para deploy em branch
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }} # Token padrão do Actions, com permissão de escrita (definida acima)
          publish_dir: ./dist # A pasta que contém o resultado do build (Vite usa 'dist')
          publish_branch: develop-builds # O nome da branch de destino para os builds
          user_name: 'github-actions[bot]' # Nome do autor do commit na branch de build
          user_email: 'github-actions[bot]@users.noreply.github.com' # Email do autor do commit
          commit_message: ${{ github.event.head_commit.message }} # Opcional: Usa a mensagem do commit que disparou o workflow
          # Opção para limpar a branch antes de adicionar os novos arquivos (mantém o histórico limpo)
          # Alternativa a 'force_orphan: true', geralmente mais seguro se a branch já existe.
          keep_files: false
          # force: true # Garante que sobrescreva (geralmente implícito com keep_files: false)